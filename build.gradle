ext {
    // skipping cnf since it is a not a java project
    javaProjects = subprojects.findAll { it.name != "cnf" && it.plugins.hasPlugin('biz.aQute.bnd') }

    // used to aggregate test coverage reports
    testableProjects = javaProjects.findAll{ it.hasProperty('test') }

    // directory to gather artifacts
    distributionDir = rootProject.file("dist")

    // some SpotBugs finding can be ignored / excluded
    spotbugsExcludeFilterFile = rootProject.file('gradle/spotbugs/excludeFilter.xml')
}

allprojects { repositories { mavenCentral() } }

// required as jacocoRootReport belongs to root project
apply plugin: 'jacoco'
jacoco { toolVersion = jacoco_version }

configure(javaProjects) { project ->
    // using bnd as source of truth regarding version (actually defined in "cnf/build.bnd")
    version = project.bnd.get("base.version")

    // using bnd to get project description from bundle name
    description = project.bnd.get("Bundle-Name")

    // bnd release also includes Javadoc which has to be built beforehand
    release { dependsOn javadoc }

    task releaseClean(type: Delete) {
        doLast {
            // failOnError needed if 'distributionDir' directory does not exist
            ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
                // delete only files of _this_ project from distributionDir
                fileset(dir: distributionDir, includes: "**/${project.name}/**")
            }
        }
    }
    clean { dependsOn releaseClean }

    apply plugin: 'jacoco'
    jacoco { toolVersion = jacoco_version }

    // configure tests to use JUnit5
    tasks.withType(Test) {

        // use specific version
        dependencies { testImplementation('org.junit.jupiter:junit-jupiter:' + junit_version) }

        // required to run JUnit5 tests
        useJUnitPlatform()

        // log only this specific events for tests
        testLogging { events "skipped", "failed" }

        jacocoTestReport {
            // requires performed tests if called directly
            dependsOn test

            additionalSourceDirs.from   = files(sourceSets.main.allSource.srcDirs)
            sourceDirectories.from      = files(sourceSets.main.allSource.srcDirs)
            classDirectories.from       = files(sourceSets.main.output)

            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }

        // report is always generated after tests ran
        finalizedBy jacocoTestReport
    }

    apply plugin: 'com.github.spotbugs'
    spotbugs {
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'low'
        excludeFilter = spotbugsExcludeFilterFile
    }

    spotbugsMain {
        // activate SpotBugs only if there are sources
        onlyIf { isNotEmpty(sourceSets.main.java) }
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    spotbugsTest {
        // activate SpotBugs only if there are sources
        onlyIf { isNotEmpty(sourceSets.test.java) }
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    javadoc {
        title = "${project.description} - v${version}"
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath

        options { setMemberLevel JavadocMemberLevel.PROTECTED }
    }

    task javadocCheck(type: Javadoc) {
        source = sourceSets.main.allJava
        source += sourceSets.test.allJava
        classpath = sourceSets.main.compileClasspath
        classpath += sourceSets.test.compileClasspath
        // use a non-default destinationDir to avoid interfering with regular javadoc
        destinationDir = file("${buildDir}/tmp/checks/javadoc")

        // copy most options from regular javadoc task
        options { setMemberLevel JavadocMemberLevel.PRIVATE }
    }
    // the Javadoc check should be included when doing final checks
    check { dependsOn javadocCheck }
    // before creating Javadoc we want to check all of it
    // the dependency must be declared after the declaration of "javadocCheck", so that the task is already "known"
    javadoc { dependsOn javadocCheck }

    // common configuration for all Javadoc tasks
    tasks.withType(Javadoc) {
        options {
            author = true
            charSet = 'UTF-8'
            encoding = 'UTF-8'
            docEncoding = 'UTF-8'
            use = true
            splitIndex = true
            noIndex = false
            noNavBar = false
            noTree = false

            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }
}

def isNotEmpty(SourceDirectorySet sourceDirectorySet) {
    return null != sourceDirectorySet && (0 < sourceDirectorySet.size())
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    description = 'Generates an aggregate report from all (testable) subprojects'

    dependsOn testableProjects.test

    additionalSourceDirs.from   = files(testableProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from      = files(testableProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from       = files(testableProjects.sourceSets.main.output)

    // ensure we care only about projects which have execution data
    executionData.from          = files(testableProjects.jacocoTestReport.executionData).filter { f -> f.exists() }

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

task build { dependsOn javaProjects.build, jacocoRootReport }

task release {
    dependsOn javaProjects.release, jacocoRootReport

    doLast {
        copy {
            from buildDir
            include "reports/jacoco/**"
            exclude "**/*.xml"
            into distributionDir
        }
    }
}

task releaseClean(type: Delete) {
    dependsOn javaProjects.releaseClean

    doLast {
        // failOnError needed if 'distributionDir' directory does not exist
        ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
            fileset(dir: distributionDir, includes: "**/**")
        }
    }
}

task clean { dependsOn releaseClean }
