ext {
    // skipping cnf since it is a not a java project
    javaProjects = subprojects.findAll { it.name != "cnf" && it.plugins.hasPlugin('biz.aQute.bnd') }

    // directory to gather artifacts
    distributionDir = rootProject.file("dist")
}

allprojects { repositories { mavenCentral() } }

configure(javaProjects) { project ->
    // using bnd as source of truth regarding version (actually defined in "cnf/build.bnd")
    version = project.bnd.get("base.version")

    // using bnd to get project description from bundle name
    description = project.bnd.get("Bundle-Name")

    // bnd release also includes Javadoc which has to be built beforehand
    release { dependsOn javadoc }

    task releaseClean(type: Delete) {
        doLast {
            // failOnError needed if 'distributionDir' directory does not exist
            ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
                // delete only files of _this_ project from distributionDir
                fileset(dir: distributionDir, includes: "**/${project.name}/**")
            }
        }
    }
    clean { dependsOn releaseClean }

    // configure tests to use JUnit5
    tasks.withType(Test) {

        // use specific version
        dependencies { testImplementation('org.junit.jupiter:junit-jupiter:' + junit_version) }

        // required to run JUnit5 tests
        useJUnitPlatform()

        // log only this specific events for tests
        testLogging { events "skipped", "failed" }
    }

    javadoc {
        title = "${project.description} - v${version}"
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath

        options {
            setMemberLevel JavadocMemberLevel.PROTECTED
            author = true
            charSet = 'UTF-8'
            encoding = 'UTF-8'
            docEncoding = 'UTF-8'
            use = true
            splitIndex = true
            noIndex = false
            noNavBar = false
            noTree = false

            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }
}

task releaseClean(type: Delete) {
    dependsOn javaProjects.releaseClean

    doLast {
        // failOnError needed if 'distributionDir' directory does not exist
        ant.delete(includeEmptyDirs: 'true', failOnError: 'false') {
            fileset(dir: distributionDir, includes: "**/**")
        }
    }
}

task clean { dependsOn releaseClean }
